{"version":3,"sources":["index.js","App.js"],"names":["ReactDOM","render","StrictMode","document","getElementById","regOperator","regOperatorAtEnd","regOperatorZero","regLastSubstring","regEndsWithNegativeSign","App","props","state","currentVal","formula","evaluated","lastAnswer","start","bind","handleBackspace","handleNumbers","handleOperator","handleDecimal","handleEvaluate","this","setState","length","slice","e","value","target","test","includes","match","expression","result","Math","round","eval","toString","className","Formula","Display","Buttons","backspace","numbers","operator","evaluate","decimal","href","rel","React","Component","id","onClick"],"mappings":"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","file":"static/js/main.617ac750.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import React from \"react\";\nimport \"./App.css\";\n\nlet regOperator = /[*/+-]/,\n  regOperatorAtEnd = /[*/+-]$/,\n  regOperatorZero = /([^.0-9]0|^0)$/,\n  regLastSubstring = /(-?\\d+\\.?\\d*)$/,\n  regEndsWithNegativeSign = /[*/+]-$/;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentVal: \"0\",\n      formula: \"\",\n      evaluated: false,\n      lastAnswer: \"0\",\n    };\n\n    this.start = this.start.bind(this);\n    this.handleBackspace = this.handleBackspace.bind(this);\n    this.handleNumbers = this.handleNumbers.bind(this);\n    this.handleOperator = this.handleOperator.bind(this);\n    this.handleDecimal = this.handleDecimal.bind(this);\n    this.handleEvaluate = this.handleEvaluate.bind(this);\n  }\n\n  start() {\n    this.setState({\n      currentVal: \"0\",\n      formula: \"\",\n      evaluated: false,\n      lastAnswer: \"0\",\n    });\n  }\n\n  handleBackspace() {\n    this.setState({\n      currentVal:\n        this.state.currentVal.length > 0\n          ? this.state.currentVal.slice(0, this.state.currentVal.length - 1)\n          : this.state.currentVal,\n      formula:\n        this.state.formula.length > 0\n          ? this.state.formula.slice(0, this.state.formula.length - 1)\n          : this.state.formula,\n    });\n  }\n\n  handleNumbers(e) {\n    const { currentVal, formula, evaluated } = this.state;\n    const value = e.target.value;\n    this.setState({ evaluated: false });\n    // If evaluated is set to true (i.e. after pressing evaluate button)\n    // \"clear up\" currentVal and formula and add entered value\n    if (evaluated === true) {\n      this.setState({\n        currentVal: value,\n        formula: value !== \"0\" ? value : 0,\n      });\n    } else {\n      this.setState({\n        currentVal:\n          currentVal === \"0\" || regOperator.test(currentVal)\n            ? value\n            : currentVal + value,\n        formula:\n          // If currentVal is 0 and entered value is 0 do not allow\n          // to add additionl zeros\n          currentVal === \"0\" && value === \"0\"\n            ? formula === \"\"\n              ? value\n              : formula\n            : // Check for \"+0\", \"-0\" etc. patterns, if such pattern\n            // is found slice the last zero and add entered value\n            regOperatorZero.test(formula)\n            ? formula.slice(0, -1) + value\n            : formula + value,\n      });\n    }\n  }\n\n  handleOperator(e) {\n    const value = e.target.value;\n    const { formula, lastAnswer, evaluated } = this.state;\n    this.setState({ currentVal: value, evaluated: false });\n    // If evaluated is set to true (i.e. after pressing evaluate button)\n    // take the result of evaluation (lastAnswer) and add to it the operator\n    // e.g formula: \"2+2=4\" -> \"4+2\", currentVal: \"4\" -> \"+\"\n    if (evaluated) {\n      this.setState({ formula: lastAnswer + value });\n    }\n    // Else if formula does not end with operator (+-*/)\n    // add the value (operator)  to the formula and store it in lastAnswer\n    // Last Answer will be used later if user clicks operator numerous times\n    else if (!regOperatorAtEnd.test(formula)) {\n      this.setState({\n        lastAnswer: formula,\n        formula: formula + value,\n      });\n    }\n    // Else if formula ends with an operator but does not end with negative sign\n    else if (!regEndsWithNegativeSign.test(formula)) {\n      this.setState({\n        formula:\n          // If formula + value ends with negative sign\n          // set formula to formula + value e.g. \"23+\" + \"-\" = \"23+-\"\n          // Else set formula to lastAnswer + value e.g. \"23+\" => \"23/\"\n          (regEndsWithNegativeSign.test(formula + value)\n            ? formula\n            : lastAnswer) + value,\n      });\n    }\n    // Handles cases like: formula: \"2+-\" + value: \"+\" => \"2+\"\n    // i.e. formula ends with negative sign but value is not negative\n    else if (value !== \"â€‘\") {\n      this.setState({\n        formula: lastAnswer + value,\n      });\n    }\n  }\n\n  handleDecimal() {\n    // If evaluated is set to true (i.e. after pressing evaluate button)\n    // set currentVal and formula to \"0\".\n    if (this.state.evaluated === true) {\n      this.setState({\n        currentVal: \"0.\",\n        formula: \"0.\",\n        evaluated: false,\n      });\n      // Pressing decimal button won't have any effect if currentVal\n      // already includes \".\"\n    } else if (!this.state.currentVal.includes(\".\")) {\n      this.setState({ evaluated: false });\n      // If inside formula there is an operator at the end e.g. \"25+\"\n      // produce \"25+0.\"\n      if (\n        regOperatorAtEnd.test(this.state.formula) ||\n        (this.state.currentVal === \"0\" && this.state.formula === \"\")\n      ) {\n        this.setState({\n          currentVal: \"0.\",\n          formula: this.state.formula + \"0.\",\n        });\n      } else {\n        this.setState({\n          // Else add the \".\" to the end of currentVal and formula\n          currentVal: this.state.formula.match(regLastSubstring)[0] + \".\",\n          formula: this.state.formula + \".\",\n        });\n      }\n    }\n  }\n\n  handleEvaluate() {\n    if (!this.state.evaluated) {\n      let expression = this.state.formula;\n      while (regOperator.test(expression[expression.length - 1])) {\n        expression = expression.slice(0, -1);\n      }\n      let result = Math.round(1000000000000 * eval(expression)) / 1000000000000;\n      this.setState({\n        currentVal: result.toString(),\n        formula: expression + \"=\" + result,\n        evaluated: true,\n        lastAnswer: result,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h1>JavaScript Calculator</h1>\n        <div className=\"calculator\">\n          <Formula formula={this.state.formula} />\n          <Display currentVal={this.state.currentVal} />\n          <Buttons\n            start={this.start}\n            backspace={this.handleBackspace}\n            numbers={this.handleNumbers}\n            operator={this.handleOperator}\n            evaluate={this.handleEvaluate}\n            decimal={this.handleDecimal}\n          />\n        </div>\n        <footer>\n          by{\" \"}\n          <a\n            href=\"https://codepen.io/sid2021\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {\" \"}\n            sid2021{\" \"}\n          </a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nclass Formula extends React.Component {\n  render() {\n    return <div className=\"formula\">{this.props.formula}</div>;\n  }\n}\n\nclass Display extends React.Component {\n  render() {\n    return <div id=\"display\">{this.props.currentVal}</div>;\n  }\n}\n\nclass Buttons extends React.Component {\n  render() {\n    return (\n      <div className=\"buttons\">\n        <button id=\"clear\" onClick={this.props.start} className=\"big-button AC\">\n          AC\n        </button>\n        <button id=\"backspace\" onClick={this.props.backspace}>\n          &lArr;\n        </button>\n        <button id=\"divide\" onClick={this.props.operator} value=\"/\">\n          /\n        </button>\n        <button id=\"seven\" onClick={this.props.numbers} value=\"7\">\n          7\n        </button>\n        <button id=\"eight\" onClick={this.props.numbers} value=\"8\">\n          8\n        </button>\n        <button id=\"nine\" onClick={this.props.numbers} value=\"9\">\n          9\n        </button>\n        <button id=\"multiply\" onClick={this.props.operator} value=\"*\">\n          x\n        </button>\n        <button id=\"four\" onClick={this.props.numbers} value=\"4\">\n          4\n        </button>\n        <button id=\"five\" onClick={this.props.numbers} value=\"5\">\n          5\n        </button>\n        <button id=\"six\" onClick={this.props.numbers} value=\"6\">\n          6\n        </button>\n        <button id=\"subtract\" onClick={this.props.operator} value=\"-\">\n          -\n        </button>\n        <button id=\"one\" onClick={this.props.numbers} value=\"1\">\n          1\n        </button>\n        <button id=\"two\" onClick={this.props.numbers} value=\"2\">\n          2\n        </button>\n        <button id=\"three\" onClick={this.props.numbers} value=\"3\">\n          3\n        </button>\n        <button id=\"add\" onClick={this.props.operator} value=\"+\">\n          +\n        </button>\n        <button id=\"zero\" onClick={this.props.numbers} value=\"0\">\n          0\n        </button>\n        <button id=\"decimal\" onClick={this.props.decimal}>\n          .\n        </button>\n        <button\n          id=\"equals\"\n          onClick={this.props.evaluate}\n          className=\"big-button\"\n        >\n          =\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}